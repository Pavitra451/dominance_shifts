initialize() {
	
	if (exists("slimgui")) {
		defineConstant("u", 1e-6);
		defineConstant("s", 0.01); //how deleterious is the mutation
		defineConstant("h", 0.1); //dominance
	}
	
	initializeMutationRate(u);
	initializeMutationType("m1", 0.0, "f", 0.0); // sweep mutation
	m1.convertToSubstitution = F;
	m1.mutationStackPolicy = "s";
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 0);
	initializeRecombinationRate(0);
	defineConstant("N", 10000); //pop size

}

1 {
	sim.addSubpop("p1", N);
}

1 late(){
	//creates a file that will later store the numbers of deleterious alleles
	//in the population
	//the first line of the file contains information on the parameters
	//in order: pop size, mutation rate, selection coefficient, dominance
	
	mut_num = -log(u)/log(10);
	s_num = -log(s)/log(10);
	dom_num = 100*h;
	
	line = N+","+u+","+s+","+h+",";
	writeFile("dist_"+N+"_"+mut_num+"_"+s_num+"_"+dom_num+".csv", line, append=T);
	
	//calculates Hardy-Weinburg frequencies

	if (h == 0.0) {
		mut_sel = sqrt(u/s);
		if (mut_sel > 1.0){
			mut_sel = 1.0;
		}
		x = asInteger(round(((mut_sel)^2)*N)); //number of homozygotes with del allele
		y = asInteger(round(2*(mut_sel)*(1-mut_sel)*N)); //number of hets with del allele
	}
	
	else {
		mut_sel = u / (h*s);
		if (mut_sel > 1.0){
			mut_sel = 1.0;
		}
		x = asInteger(round(((mut_sel)^2)*N)); //number of homozygotes with deleterious allele
		y = asInteger(round((mut_sel)*(1-mut_sel)*N)); //number of hets with deleterious allele
	}
	
	//this section adds the deleterious mutations to the correct number of individuals in the population
	if (x>0 | y>0){
		target = sample(p1.individuals, x+y);
		if (x>0){
			for (i in 0:(x-1)){
				target[i].genome1.addNewMutation(m1,0.0,0);
				target[i].genome2.addNewMutation(m1,0.0,0);
			}
		
		}
		
		
		if (y>0){
			for (i in (x):(x+y-1)){
				target[i].genome1.addNewMutation(m1,0.0, 0);
			}
		}
	
	
	}

}

//for the burn-in period, this simulates back-mutation if two m1 mutations occur at the same spot
1:999999 late(){
	everyone=p1.individuals;
	
	for (i in 0:(N-1)){
		genome1 = everyone[i].genome1;
		genome2 = everyone[i].genome2;
		
		if (genome1.countOfMutationsOfType(m1)>1){
			genome1.removeMutations();
		}
		
		if (genome2.countOfMutationsOfType(m1)>1){
			genome2.removeMutations();
		}
	}


}

//for the recording period, this section both simulates back-mutation and records the number of homozygotes & heterozygotes for the deleterious allele

1000000: 11000000 late(){
	hom = 0;
	het = 0;
	not = 0;
	everyone=p1.individuals;
	
	//this simulates back-mutation (if more than two m1 mutations occurs on the same genome, they are both removed)
	for (i in 0:(N-1)){
		genome1 = everyone[i].genome1;
		genome2 = everyone[i].genome2;
		
		if (genome1.countOfMutationsOfType(m1)>1){
			genome1.removeMutations();
		}
		
		if (genome2.countOfMutationsOfType(m1)>1){
			genome2.removeMutations();
		}
		
		//counts the number of heterozygotes and homozygotes in the population every generation
		if (genome1.countOfMutationsOfType(m1) & genome2.countOfMutationsOfType(m1))
			hom = hom+1;
		else if (genome1.countOfMutationsOfType(m1) | genome2.countOfMutationsOfType(m1))
			het = het+1;
		else
			not = not+1;
	
	}
	
	//adds the number of homozygotes & heterozygotes to the results file
	
	line2 = hom+","+het;
	
	mut_num = -log(u)/log(10);
	s_num = -log(s)/log(10);
	dom_num = 100*h;
	
	writeFile("dist_"+N+"_"+mut_num+"_"+s_num+"_"+dom_num+".csv", line2, append=T);

}

11000000 late(){
	sim.simulationFinished();
}

//fitness function
fitness(NULL) {
	if (genome1.countOfMutationsOfType(m1) & genome2.countOfMutationsOfType(m1))
		return 1.0 - s;
	else if (genome1.countOfMutationsOfType(m1) | genome2.countOfMutationsOfType(m1))
		return 1.0 - (h*s);
	else
		return 1.0;
}
